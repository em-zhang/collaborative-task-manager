{"version":3,"sources":["components/Task.js","components/ToDoList.js","components/AddTask.js","components/Alert.js","components/ToolBar.js","App.js","InMemoryApp.js","index.js"],"names":["Task","props","className","type","checked","isCompleted","onChange","e","onTaskFieldChanged","taskId","target","value","taskLabel","disabled","onClick","onDeleteTask","ToDoList","console","log","taskList","id","numCompleted","length","map","task","AddTask","useState","currTask","setCurrTask","placeholder","onKeyPress","key","onAddTask","Alert","children","onClose","onOK","ToolBar","showAlert","setShowAlert","toggleModal","showCompleted","onSetShowCompleted","onDeleteTasks","App","setShowCompleted","filteredList","filter","onSetTaskList","setTaskList","handleAddTask","handleDeleteTask","handleDeleteTasks","handleTaskFieldChanged","InMemoryApp","initialData","idCounter","setIdCounter","taskID","deletedList","field","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e4e3c53.chunk.js","sourcesContent":["import TextareaAutosize from 'react-textarea-autosize';\nimport './Task.css';\n\nfunction Task(props) {\n    return(\n        <div className=\"task-container\">\n            <input type=\"checkbox\"\n                   className=\"checkbox\"\n                   checked={props.isCompleted}\n                   onChange={(e) => {\n                        props.onTaskFieldChanged(props.taskId, \"isCompleted\", e.target.checked)\n                   }}\n            />\n            <TextareaAutosize\n                className=\"task-label\"\n                value={props.taskLabel}\n                onChange={(e) =>\n                    props.onTaskFieldChanged(props.taskId, \"taskLabel\", e.target.value)\n                }\n                // don't allow user to edit a task if it's been marked completed\n                disabled={props.isCompleted}\n            />\n            <div>\n                <button className=\"delete-button\"\n                        onClick={() => {\n                            props.onDeleteTask(props.taskId);\n                        }}>\n                    X\n                </button>\n            </div>\n        </div>\n    )\n}\nexport default Task;","import React from 'react';\nimport Task from \"./Task\";\nimport './ToDoList.css';\n\nfunction ToDoList(props) {\n    console.log(\"in ToDoList \", props.taskList)\n    return (\n        <div id = \"list-container\">\n            <div className=\"my-tasks\">\n                <h2>My Tasks ({props.numCompleted}/{props.taskList.length} completed)\n                </h2>\n            </div>\n            <div className=\"checklist\">\n                {props.taskList.map(task =>\n                <Task\n                    key={task.taskId}\n                    onDeleteTask={props.onDeleteTask}\n                    onTaskFieldChanged={props.onTaskFieldChanged}\n                    {...task}\n                />)}\n            </div>\n        </div>);\n}\n\nexport default ToDoList;","import './AddTask.css';\nimport {useState} from \"react\";\n\nfunction AddTask(props){\n    const [currTask, setCurrTask] = useState(\"\");\n\n    return (\n        <div>\n            <input\n                className=\"todo-input\"\n                id=\"new-todo-text\"\n                placeholder=\"Enter task here\"\n                value={currTask}\n                onChange={e => {\n                    setCurrTask(e.target.value);\n                }}\n                onKeyPress={e => {\n                    if (currTask !== \"\") {\n                        if (e.key === \"Enter\") {\n                            props.onAddTask(currTask);\n                            setCurrTask(\"\");\n                        }\n                    }\n                }}\n            />\n            <button className={currTask !== \"\" ? \"add-button\" : \"add-button-disabled\"}\n                    onClick={() => {\n                        if (currTask !== \"\") {\n                            props.onAddTask(currTask);\n                            setCurrTask(\"\");\n                        }\n                    }}>\n                Add\n            </button>\n        </div>\n    );\n}\n\nexport default AddTask;","import './Alert.css';\n\nfunction Alert(props) {\n    return (\n        <div className={\"backdrop\"}>\n            <div className=\"modal\">\n                {props.children}\n                <div className=\"alert-buttons\">\n                    <button className={\"alert-button\"} id={\"alert-cancel\"} type={\"button\"}\n                            onClick={() => props.onClose()}>\n                        Cancel\n                    </button>\n                    <button className={\"alert-button\"} id={\"alert-ok\"} type={\"button\"}\n                            onClick={() => {\n                                props.onOK();\n                                props.onClose()\n                            }}>\n                        OK\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Alert;","import Alert from \"../components/Alert\"\nimport React, {useState} from \"react\";\nimport './ToolBar.css';\n\nfunction ToolBar(props) {\n    const [showAlert, setShowAlert] = useState(false);\n\n    function handleAlertOK() {\n        props.onDeleteTasks();\n    }\n\n    function toggleModal() {\n        showAlert ? setShowAlert(false) : setShowAlert(true)\n    }\n\n    function toggleShowCompleted() {\n        props.showCompleted ? props.onSetShowCompleted(false) : props.onSetShowCompleted(true)\n    }\n\n    return (\n        <div>\n            <div className=\"toolbar\">\n                <button\n                    className=\"toolbar-button\"\n                    id=\"hide-button\"\n                    onClick={() => {toggleShowCompleted()}}>\n                    {props.showCompleted ? \"Hide Completed\" : \"Show All Tasks\"}\n                </button>\n                <button\n                    className=\"toolbar-button\"\n                    // only make button fully visible and support functionality if there are completed tasks\n                    id={props.numCompleted !== 0 ? null : \"delete-completed-button-hidden\"}\n                    onClick={props.numCompleted !== 0 ? toggleModal : null}\n                >\n                    Delete Completed</button>\n            </div>\n            {showAlert && <Alert onClose={toggleModal} onOK={handleAlertOK}>\n                <div>\n                    Are you sure you want to delete all completed tasks?\n                </div>\n            </Alert>}\n        </div>\n    );\n}\n\nexport default ToolBar;","import './App.css';\nimport './index.js';\nimport ToDoList from \"./components/ToDoList\"\nimport AddTask from \"./components/AddTask\"\nimport ToolBar from \"./components/ToolBar\"\nimport React, {useState} from \"react\";\n\nfunction App(props) {\n    const[showCompleted, setShowCompleted] = useState(true);\n    const filteredList = props.taskList.filter(task => showCompleted || !task.isCompleted);\n    const numCompleted = props.taskList.filter(task => task.isCompleted).length;\n\n    return (\n        <div id=\"app-container\">\n            <div className=\"heading\">\n                <h1>Task Manager</h1>\n            </div>\n            <div className=\"add-task\">\n                <AddTask\n                    taskList={filteredList}\n                    onSetTaskList={props.setTaskList}\n                    onAddTask={props.handleAddTask}\n                />\n            </div>\n            <div>\n                <ToDoList\n                    taskList={filteredList}\n                    onDeleteTask={props.handleDeleteTask}\n                    onDeleteTasks={props.handleDeleteTasks}\n                    onTaskFieldChanged={props.handleTaskFieldChanged}\n                    numCompleted={numCompleted}\n                />\n            </div>\n            <div>\n                <ToolBar\n                    onDeleteTasks={props.handleDeleteTasks}\n                    showCompleted={showCompleted}\n                    onSetShowCompleted={setShowCompleted}\n                    numCompleted={numCompleted}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React, { useState } from \"react\";\nimport App from \"./App\"\n\nfunction InMemoryApp(props) {\n    const [taskList, setTaskList] = useState(props.initialData);\n    const [idCounter, setIdCounter] = useState(taskList.length);\n\n    // adds a task, maintaining a taskId counter\n    function handleAddTask(currTask) {\n        setTaskList([...taskList, {\n            taskId: idCounter,\n            taskLabel: currTask,\n            isCompleted: false\n        }]);\n        setIdCounter(idCounter + 1);\n    }\n\n    // handles updating any field of a task\n    function handleTaskFieldChanged(taskId, field, value) {\n        setTaskList(taskList.map(\n            task => task.taskId !== taskId\n                ? task\n                : {...task, [field]: value}))\n    }\n\n    // handles task deletion through filtering\n    function handleDeleteTask(taskID) {\n        const deletedList = taskList.filter(task => task.taskId !== taskID);\n        setTaskList(deletedList)\n    }\n    function handleDeleteTasks() {\n        setTaskList(taskList.filter(task => task.isCompleted === false))\n    }\n\n    return <div>\n        <App\n            taskList={taskList}\n            handleDeleteTask={handleDeleteTask}\n            handleDeleteTasks={handleDeleteTasks}\n            handleAddTask={handleAddTask}\n            handleTaskFieldChanged={handleTaskFieldChanged}\n        />\n    </div>\n}\n\nexport default InMemoryApp;","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport InMemoryApp from './InMemoryApp';\n\nconst initialData = [\n    {\n        taskId: 0,\n        taskLabel: \"Get lunch at dining hall\",\n        isCompleted: true\n    },\n    {\n        taskId: 1,\n        taskLabel: \"Buy textbooks\",\n        isCompleted: false\n    },\n    {\n        taskId: 2,\n        taskLabel: \"Watch videos about React\",\n        isCompleted: true\n    },\n    {\n        taskId: 3,\n        taskLabel: \"Call Mom\",\n        isCompleted: false\n    },\n    {\n        taskId: 4,\n        taskLabel: \"Meet with Prof. Rhodes\",\n        isCompleted: false\n    },\n];\n\nReactDOM.render(\n  <React.StrictMode>\n      <InMemoryApp initialData={initialData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}