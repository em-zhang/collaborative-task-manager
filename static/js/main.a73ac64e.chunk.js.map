{"version":3,"sources":["components/Task.js","components/ToDoList.js","components/AddTask.js","components/Alert.js","components/SortMenu.js","components/ToolBar.js","App.js","FirestoreApp.js","index.js"],"names":["Task","props","className","type","checked","isCompleted","onChange","e","onTaskFieldChanged","taskId","target","value","taskLabel","onKeyPress","key","preventDefault","disabled","id","priority","onClick","console","log","onChangePriority","repeat","onDeleteTask","ToDoList","taskList","map","task","AddTask","useState","currTask","setCurrTask","placeholder","onAddTask","Alert","children","onOK","onClose","SortMenu","onSortByName","sortOption","onSortByPriority","onSortByCreationDate","ToolBar","showAlert","setShowAlert","showSortMenu","setSortMenu","toggleModal","toggleSortModal","onSortSelected","sortOptionText","describeSortOption","showCompleted","onSetShowCompleted","numCompleted","onDeleteTasks","App","setShowCompleted","filteredList","filter","length","onSetTaskList","setTaskList","handleAddTask","handleDeleteTask","handleChangePriority","handleDeleteTasks","handleTaskFieldChanged","handleSortSelected","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","firestore","FirestoreApp","collectionName","query","collection","setSortOption","orderBy","useCollection","loading","docs","doc","data","taskID","delete","taskPriority","docRef","update","where","get","then","querySnapshot","forEach","ref","newId","generateUniqueID","set","dateCreated","database","ServerValue","TIMESTAMP","field","option","ReactDOM","render","StrictMode","initialData","document","getElementById"],"mappings":"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","file":"static/js/main.a73ac64e.chunk.js","sourcesContent":["import TextareaAutosize from 'react-textarea-autosize';\nimport './Task.css';\nimport {useState} from \"react\";\n\nfunction Task(props) {\n    return (\n        <div className=\"task-container\">\n            <input type=\"checkbox\"\n                   className=\"checkbox\"\n                   checked={props.isCompleted}\n                   onChange={(e) => {\n                       props.onTaskFieldChanged(props.taskId, \"isCompleted\", e.target.checked)\n                   }}\n            />\n            <TextareaAutosize\n                className= {!props.isCompleted ? \"task-label\" : \"task-label-strikethrough\"}\n                value={props.taskLabel}\n                onChange={(e) => {\n                    props.onTaskFieldChanged(props.taskId, \"taskLabel\", e.target.value)\n                }}\n                onKeyPress={e => {\n                    if (e.key === \"Enter\") {\n                        e.preventDefault();\n                    }\n                }}\n                // don't allow user to edit a task if it's been marked completed\n                disabled={props.isCompleted}\n\n            />\n            <div>\n                <button className=\"priority-button\"\n                        id={props.priority === 3 ? \"high\" : props.priority === 2 ? \"medium\" : \"low\"}\n                        onClick={() => {\n                            console.log(\"Priority is\", props.priority);\n                            props.onChangePriority(props.taskId, props.priority);\n                        }}>\n                    {\"!\".repeat(props.priority)}\n                </button>\n            </div>\n            <div>\n                <button className=\"delete-button\"\n                        onClick={() => {\n                            props.onDeleteTask(props.taskId);\n                        }}>\n                    X\n                </button>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Task;","import React from 'react';\nimport Task from \"./Task\";\nimport './ToDoList.css';\n\nfunction ToDoList(props) {\n    return (\n        <div id=\"list-container\">\n            <div id=\"checklist\">\n                {props.taskList.map(task =>\n                    <Task {...task}\n                          key={task.taskId}\n                          onDeleteTask={props.onDeleteTask}\n                          onTaskFieldChanged={props.onTaskFieldChanged}\n                          onChangePriority={props.onChangePriority}\n                    />)}\n            </div>\n        </div>);\n}\n\nexport default ToDoList;","import './AddTask.css';\nimport {useState} from \"react\";\n\nfunction AddTask(props){\n    const [currTask, setCurrTask] = useState(\"\");\n\n    return (\n        <div>\n            <input\n                className=\"todo-input\"\n                id=\"new-todo-text\"\n                placeholder=\"Enter task here\"\n                value={currTask}\n                onChange={e => {\n                    setCurrTask(e.target.value);\n                }}\n                onKeyPress={e => {\n                    if (currTask !== \"\") {\n                        if (e.key === \"Enter\") {\n                            props.onAddTask(currTask);\n                            setCurrTask(\"\");\n                        }\n                    }\n                }}\n            />\n            <button className={currTask !== \"\" ? \"add-button\" : \"add-button-disabled\"}\n                    onClick={() => {\n                        if (currTask !== \"\") {\n                            props.onAddTask(currTask);\n                            setCurrTask(\"\");\n                        }\n                    }}>\n                Add\n            </button>\n        </div>\n    );\n}\n\nexport default AddTask;","import './Alert.css';\n\nfunction Alert(props) {\n    return (\n        <div className={\"backdrop\"}>\n            <div className=\"modal\">\n                {props.children}\n                <div className=\"alert-buttons\">\n                    <button className={\"alert-button\"} id={\"alert-ok\"} type={\"button\"}\n                            onClick={() => {\n                                props.onOK();\n                                props.onClose()\n                            }}>\n                        OK\n                    </button>\n                    <button className={\"alert-button\"} id={\"alert-cancel\"} type={\"button\"}\n                            onClick={() => props.onClose()}>\n                        Cancel\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Alert;","import './SortMenu.css';\n\nfunction SortMenu(props) {\n    return (\n        <div className={\"sort-backdrop\"}>\n            <div className=\"sort-modal\">\n                {props.children}\n                <div className=\"alert-buttons\">\n                    <button className={\"alert-button\"} id={\"alert-sort-name\"} type={\"button\"}\n                            onClick={() => {\n                                props.onSortByName();\n                                props.onClose()\n                            }}>\n                        {props.sortOption === \"taskLabel\" ? \"✓ Name\" : \"Name\"}\n                    </button>\n                    <button className={\"alert-button\"} id={\"alert-sort-priority\"} type={\"button\"}\n                            onClick={() => {\n                                props.onSortByPriority();\n                                props.onClose()\n                            }}>\n                        {props.sortOption === \"priority\" ? \"✓ Priority\" : \"Priority\"}\n                    </button>\n                    <button className={\"alert-button\"} id={\"alert-sort-date\"} type={\"button\"}\n                            onClick={() => {\n                                props.onSortByCreationDate();\n                                props.onClose()\n                            }}>\n                        {props.sortOption === \"dateCreated\" ? \"✓ Date Created\" : \"Date Created\"}\n                    </button>\n                    <button className={\"alert-button\"} id={\"alert-sort-cancel\"} type={\"button\"}\n                            onClick={() => props.onClose()}>\n                        Cancel\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default SortMenu;","import Alert from \"../components/Alert\"\nimport SortMenu from \"../components/SortMenu\"\nimport React, {useState} from \"react\";\nimport './ToolBar.css';\n\nfunction ToolBar(props) {\n    const [showAlert, setShowAlert] = useState(false);\n    const [showSortMenu, setSortMenu] = useState(false);\n\n    function handleSortByName() {\n        props.onSortSelected(\"taskLabel\");\n    }\n\n    function handleSortByPriority() {\n        props.onSortSelected(\"priority\");\n    }\n\n    function handleSortByCreationDate() {\n        props.onSortSelected(\"dateCreated\");\n    }\n\n    function describeSortOption() {\n        let sortOptionText = \"Date Created\";\n        if (props.sortOption === \"dateCreated\"){\n            sortOptionText = \"Date Created\";\n        }\n        else if (props.sortOption === \"priority\"){\n            sortOptionText = \"Priority\";\n        }\n        else if (props.sortOption === \"taskLabel\"){\n            sortOptionText = \"Name\";\n        }\n        return sortOptionText;\n    }\n\n    function handleAlertOK() {\n        props.onDeleteTasks();\n    }\n\n    function toggleModal() {\n        showAlert ? setShowAlert(false) : setShowAlert(true)\n    }\n\n    function toggleSortModal() {\n        showSortMenu ? setSortMenu(false) : setSortMenu(true)\n    }\n\n    function toggleShowCompleted() {\n        props.showCompleted ? props.onSetShowCompleted(false) : props.onSetShowCompleted(true)\n    }\n\n    return (\n        <div>\n            <div className=\"toolbar\">\n                <button\n                    id=\"sort-button\"\n                    className=\"toolbar-button\"\n                    onClick={toggleSortModal}>\n                    <i id=\"sort-icon\" className=\"las la-sort-amount-down\"></i>\n                    <br/>\n                    Sort\n                </button>\n                {showSortMenu &&\n                <SortMenu className=\"toolbar-button\"\n                          sortOption={props.sortOption}\n                          onClose={toggleSortModal}\n                          onSortByName={handleSortByName}\n                          onSortByPriority={handleSortByPriority}\n                          onSortByCreationDate={handleSortByCreationDate}>\n                    <div className=\"sort-modal-message\">\n                        Tasks are currently sorted by <b>{describeSortOption()}</b>.\n                        <br/>\n                        <br/>\n                        Sort by:\n                    </div>\n                </SortMenu>}\n                <button\n                    className=\"toolbar-button\"\n                    id=\"hide-button\"\n                    onClick={() => {toggleShowCompleted()}}>\n                    <i id=\"hide-icon\"\n                       className={props.showCompleted ? \"las la-eye-slash\": \"las la-eye\"}>\n                    </i>\n                    <br/>\n                    {props.showCompleted ? \"Hide Completed\" : \"Show All\"}\n                </button>\n                <button\n                    className=\"toolbar-button\"\n                    // only make button fully visible and support functionality if there are completed tasks\n                    id={props.numCompleted !== 0 ? \"delete-button\" : \"delete-completed-button-hidden\"}\n                    onClick={props.numCompleted !== 0 ? toggleModal : null}>\n                    <i id=\"delete-icon\" className=\"las la-trash\">\n                    </i>\n                    <br/>\n                    Delete Completed\n                </button>\n            </div>\n            {showAlert && <Alert onClose={toggleModal} onOK={handleAlertOK}>\n                <div>\n                    Are you sure you want to delete all {props.numCompleted} completed tasks?\n                </div>\n            </Alert>}\n        </div>\n    );\n}\n\nexport default ToolBar;","import './App.css';\nimport './index.js';\nimport ToDoList from \"./components/ToDoList\"\nimport AddTask from \"./components/AddTask\"\nimport ToolBar from \"./components/ToolBar\"\nimport React, {useState} from \"react\";\n\nfunction App(props) {\n    const[showCompleted, setShowCompleted] = useState(true);\n    const filteredList = props.taskList.filter(task => showCompleted || !task.isCompleted);\n    const numCompleted = props.taskList.filter(task => task.isCompleted).length;\n\n    return (\n        <div id=\"app-container\">\n            <div className=\"heading\">\n                <h1>Task Manager</h1>\n            </div>\n            <div className=\"topButtonBar\">\n                <div className=\"add-task\">\n                <AddTask\n                    taskList={filteredList}\n                    onSetTaskList={props.setTaskList}\n                    onAddTask={props.handleAddTask}\n                />\n                </div>\n            </div>\n            <div className=\"taskList\">\n                <ToDoList\n                    taskList={filteredList}\n                    onDeleteTask={props.handleDeleteTask}\n                    onChangePriority={props.handleChangePriority}\n                    onDeleteTasks={props.handleDeleteTasks}\n                    onTaskFieldChanged={props.handleTaskFieldChanged}\n                    numCompleted={numCompleted}\n                />\n            </div>\n            <div className=\"bottomBar\">\n                <ToolBar\n                    onDeleteTasks={props.handleDeleteTasks}\n                    showCompleted={showCompleted}\n                    onSetShowCompleted={setShowCompleted}\n                    numCompleted={numCompleted}\n                    onSortSelected={props.handleSortSelected}\n                    sortOption={props.sortOption}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React, {useState} from \"react\";\nimport App from \"./App\"\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nimport firebase from \"firebase/compat\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\n\n// Firebase initialization config provided from lab docs\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCd9qqxvMpEKpBzwfWcc2tlRFa6ICaLH_s\",\n    authDomain: \"hmc-cs124-fa21-labs.firebaseapp.com\",\n    projectId: \"hmc-cs124-fa21-labs\",\n    storageBucket: \"hmc-cs124-fa21-labs.appspot.com\",\n    messagingSenderId: \"949410042946\",\n    appId: \"1:949410042946:web:0113b139a7e3cd1cc709db\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\n\n\nfunction FirestoreApp(props) {\n    // FirestoreApp collection\n    const collectionName = \"em-zhang-tasks-v4\"\n    let query = db.collection(collectionName);\n\n    const [sortOption, setSortOption] = useState(\"dateCreated\");\n    if (sortOption){\n        // sort in descending order by priority\n        if (sortOption === \"priority\"){\n            query = query.orderBy(sortOption, \"desc\");\n        } else {\n            query = query.orderBy(sortOption);\n        }\n    }\n    const [value, loading, error] = useCollection(query); // You can change the const used here\n    let taskList = [];\n    if (value) {\n        taskList = value.docs.map((doc) => {\n            return {...doc.data()}\n        });\n    }\n\n    // adds a task, generating new id each time\n    function handleAddTask(currTask) {\n        const newId = generateUniqueID();\n        console.log(\"adding new task, task ID is \", newId);\n        db.collection(collectionName).doc(newId).set({\n            taskId: newId,\n            taskLabel: currTask,\n            isCompleted: false,\n            priority: 1,\n            dateCreated: firebase.database.ServerValue.TIMESTAMP\n        });\n        return newId;\n    }\n\n    // handles updating any field of a task\n    function handleTaskFieldChanged(taskId, field, value) {\n        const doc = db.collection(collectionName).doc(taskId);\n        doc.update({\n            [field]: value,\n        })\n    }\n\n    function handleDeleteTask(taskID) {\n        console.log(\"deleting task, task ID is \", taskID);\n        db.collection(collectionName).doc(taskID).delete();\n    }\n\n    function handleChangePriority(taskID, taskPriority) {\n        let docRef = db.collection(collectionName).doc(taskID);\n        if (taskPriority === 1) {\n            docRef.update({\n                priority: 2\n            })\n        } else if (taskPriority === 2) {\n            docRef.update({\n                priority: 3\n            })\n        } else if (taskPriority === 3) {\n            docRef.update({\n                priority: 1\n            })\n        }\n    }\n\n    function handleDeleteTasks() {\n        let delete_query = db.collection(collectionName).where('isCompleted', '==', true);\n        delete_query.get().then(function (querySnapshot) {\n            querySnapshot.forEach(function (doc) {\n                doc.ref.delete();\n            });\n        });\n    }\n\n    function handleSortSelected(option){\n        setSortOption(option);\n    }\n\n    return <div>\n        <App\n            taskList={taskList}\n            handleDeleteTask={handleDeleteTask}\n            handleChangePriority={handleChangePriority}\n            handleDeleteTasks={handleDeleteTasks}\n            handleAddTask={handleAddTask}\n            handleTaskFieldChanged={handleTaskFieldChanged}\n            handleSortSelected={handleSortSelected}\n            sortOption={sortOption}\n        />\n        {loading &&\n        <div className=\"loading-message\">\n            Loading tasks...\n        </div>}\n    </div>\n}\n\nexport default FirestoreApp;","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import InMemoryApp from './InMemoryApp';\nimport FirestoreApp from \"./FirestoreApp\";\n\nconst initialData = [\n    {\n        taskId: 0,\n        taskLabel: \"Get lunch at dining hall\",\n        isCompleted: true\n    },\n    {\n        taskId: 1,\n        taskLabel: \"Buy textbooks\",\n        isCompleted: false\n    },\n    {\n        taskId: 2,\n        taskLabel: \"Watch videos about React\",\n        isCompleted: true\n    },\n    {\n        taskId: 3,\n        taskLabel: \"Call Mom\",\n        isCompleted: false\n    },\n    {\n        taskId: 4,\n        taskLabel: \"Meet with Prof. Rhodes\",\n        isCompleted: false\n    },\n];\n\nReactDOM.render(\n  <React.StrictMode>\n      <FirestoreApp initialData={initialData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}