{"version":3,"sources":["components/Task.js","components/ToDoList.js","components/AddTask.js","components/Alert.js","components/ToolBar.js","App.js","InMemoryApp.js","index.js"],"names":["Task","props","className","type","checked","isCompleted","onChange","e","onTaskFieldChanged","taskId","target","value","taskLabel","disabled","onClick","onDeleteTask","ToDoList","id","numCompleted","taskList","length","map","task","AddTask","useState","currTask","setCurrTask","placeholder","onKeyPress","key","onAddTask","Alert","children","onClose","onOK","ToolBar","showAlert","setShowAlert","toggleModal","showCompleted","onSetShowCompleted","onDeleteTasks","App","setShowCompleted","filteredList","filter","onSetTaskList","setTaskList","handleAddTask","handleDeleteTask","handleDeleteTasks","handleTaskFieldChanged","InMemoryApp","initialData","idCounter","setIdCounter","taskID","deletedList","field","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ad1aaab.chunk.js","sourcesContent":["import TextareaAutosize from 'react-textarea-autosize';\nimport './Task.css';\n\nfunction Task(props) {\n    return(\n        <div className=\"task-container\">\n            <input type=\"checkbox\"\n                   className=\"checkbox\"\n                   checked={props.isCompleted}\n                   onChange={(e) => {\n                        props.onTaskFieldChanged(props.taskId, \"isCompleted\", e.target.checked)\n                   }}\n            />\n            <TextareaAutosize\n                className=\"task-label\"\n                value={props.taskLabel}\n                onChange={(e) =>\n                    props.onTaskFieldChanged(props.taskId, \"taskLabel\", e.target.value)\n                }\n                // don't allow user to edit a task if it's been marked completed\n                disabled={props.isCompleted}\n            />\n            <div>\n                <button className=\"delete-button\"\n                        onClick={() => {\n                            props.onDeleteTask(props.taskId);\n                        }}>\n                    X\n                </button>\n            </div>\n        </div>\n    )\n}\nexport default Task;","import React from 'react';\nimport Task from \"./Task\";\nimport './ToDoList.css';\n\nfunction ToDoList(props) {\n    return (\n        <div id = \"list-container\">\n            <div className=\"my-tasks\">\n                <h2>My Tasks ({props.numCompleted}/{props.taskList.length} completed)\n                </h2>\n            </div>\n            <div className=\"checklist\">\n                {props.taskList.map(task =>\n                <Task\n                    key={task.taskId}\n                    onDeleteTask={props.onDeleteTask}\n                    onTaskFieldChanged={props.onTaskFieldChanged}\n                    {...task}\n                />)}\n            </div>\n        </div>);\n}\n\nexport default ToDoList;","import './AddTask.css';\nimport {useState} from \"react\";\n\nfunction AddTask(props){\n    const [currTask, setCurrTask] = useState(\"\");\n\n    return (\n        <div>\n            <input\n                className=\"todo-input\"\n                id=\"new-todo-text\"\n                placeholder=\"Enter task here\"\n                value={currTask}\n                onChange={e => {\n                    setCurrTask(e.target.value);\n                }}\n                onKeyPress={e => {\n                    if (currTask !== \"\") {\n                        if (e.key === \"Enter\") {\n                            props.onAddTask(currTask);\n                            setCurrTask(\"\");\n                        }\n                    }\n                }}\n            />\n            <button className={currTask !== \"\" ? \"add-button\" : \"add-button-disabled\"}\n                    onClick={() => {\n                        if (currTask !== \"\") {\n                            props.onAddTask(currTask);\n                            setCurrTask(\"\");\n                        }\n                    }}>\n                Add\n            </button>\n        </div>\n    );\n}\n\nexport default AddTask;","import './Alert.css';\n\nfunction Alert(props) {\n    return (\n        <div className={\"backdrop\"}>\n            <div className=\"modal\">\n                {props.children}\n                <div className=\"alert-buttons\">\n                    <button className={\"alert-button\"} id={\"alert-cancel\"} type={\"button\"}\n                            onClick={() => props.onClose()}>\n                        Cancel\n                    </button>\n                    <button className={\"alert-button\"} id={\"alert-ok\"} type={\"button\"}\n                            onClick={() => {\n                                props.onOK();\n                                props.onClose()\n                            }}>\n                        OK\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Alert;","import Alert from \"../components/Alert\"\nimport React, {useState} from \"react\";\nimport './ToolBar.css';\n\nfunction ToolBar(props) {\n    const [showAlert, setShowAlert] = useState(false);\n\n    function handleAlertOK() {\n        props.onDeleteTasks();\n    }\n\n    function toggleModal() {\n        showAlert ? setShowAlert(false) : setShowAlert(true)\n    }\n\n    function toggleShowCompleted() {\n        props.showCompleted ? props.onSetShowCompleted(false) : props.onSetShowCompleted(true)\n    }\n\n    return (\n        <div>\n            <div className=\"toolbar\">\n                <button\n                    className=\"toolbar-button\"\n                    id=\"hide-button\"\n                    onClick={() => {toggleShowCompleted()}}>\n                    {props.showCompleted ? \"Hide Completed\" : \"Show All Tasks\"}\n                </button>\n                <button\n                    className=\"toolbar-button\"\n                    // only make button fully visible and support functionality if there are completed tasks\n                    id={props.numCompleted !== 0 ? null : \"delete-completed-button-hidden\"}\n                    onClick={props.numCompleted !== 0 ? toggleModal : null}\n                >\n                    Delete Completed</button>\n            </div>\n            {showAlert && <Alert onClose={toggleModal} onOK={handleAlertOK}>\n                <div>\n                    Are you sure you want to delete all completed tasks?\n                </div>\n            </Alert>}\n        </div>\n    );\n}\n\nexport default ToolBar;","import './App.css';\nimport './index.js';\nimport ToDoList from \"./components/ToDoList\"\nimport AddTask from \"./components/AddTask\"\nimport ToolBar from \"./components/ToolBar\"\nimport React, {useState} from \"react\";\n\nfunction App(props) {\n    const[showCompleted, setShowCompleted] = useState(true);\n    const filteredList = props.taskList.filter(task => showCompleted || !task.isCompleted);\n    const numCompleted = props.taskList.filter(task => task.isCompleted).length;\n\n    return (\n        <div id=\"app-container\">\n            <div className=\"heading\">\n                <h1>Task Manager</h1>\n            </div>\n            <div className=\"add-task\">\n                <AddTask\n                    taskList={filteredList}\n                    onSetTaskList={props.setTaskList}\n                    onAddTask={props.handleAddTask}\n                />\n            </div>\n            <div>\n                <ToDoList\n                    taskList={filteredList}\n                    onDeleteTask={props.handleDeleteTask}\n                    onDeleteTasks={props.handleDeleteTasks}\n                    onTaskFieldChanged={props.handleTaskFieldChanged}\n                    numCompleted={numCompleted}\n                />\n            </div>\n            <div>\n                <ToolBar\n                    onDeleteTasks={props.handleDeleteTasks}\n                    showCompleted={showCompleted}\n                    onSetShowCompleted={setShowCompleted}\n                    numCompleted={numCompleted}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React, { useState } from \"react\";\nimport App from \"./App\"\n\nfunction InMemoryApp(props) {\n    const [taskList, setTaskList] = useState(props.initialData);\n    const [idCounter, setIdCounter] = useState(taskList.length);\n\n    // adds a task, maintaining a taskId counter\n    function handleAddTask(currTask) {\n        setTaskList([...taskList, {\n            taskId: idCounter,\n            taskLabel: currTask,\n            isCompleted: false\n        }]);\n        setIdCounter(idCounter + 1);\n    }\n\n    // handles updating any field of a task\n    function handleTaskFieldChanged(taskId, field, value) {\n        setTaskList(taskList.map(\n            task => task.taskId !== taskId\n                ? task\n                : {...task, [field]: value}))\n    }\n\n    // handles task deletion through filtering\n    function handleDeleteTask(taskID) {\n        const deletedList = taskList.filter(task => task.taskId !== taskID);\n        setTaskList(deletedList)\n    }\n    function handleDeleteTasks() {\n        setTaskList(taskList.filter(task => task.isCompleted === false))\n    }\n\n    return <div>\n        <App\n            taskList={taskList}\n            handleDeleteTask={handleDeleteTask}\n            handleDeleteTasks={handleDeleteTasks}\n            handleAddTask={handleAddTask}\n            handleTaskFieldChanged={handleTaskFieldChanged}\n        />\n    </div>\n}\n\nexport default InMemoryApp;","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport InMemoryApp from './InMemoryApp';\n\nconst initialData = [\n    {\n        taskId: 0,\n        taskLabel: \"Get lunch at dining hall\",\n        isCompleted: true\n    },\n    {\n        taskId: 1,\n        taskLabel: \"Buy textbooks\",\n        isCompleted: false\n    },\n    {\n        taskId: 2,\n        taskLabel: \"Watch videos about React\",\n        isCompleted: true\n    },\n    {\n        taskId: 3,\n        taskLabel: \"Call Mom\",\n        isCompleted: false\n    },\n    {\n        taskId: 4,\n        taskLabel: \"Meet with Prof. Rhodes\",\n        isCompleted: false\n    },\n];\n\nReactDOM.render(\n  <React.StrictMode>\n      <InMemoryApp initialData={initialData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}