{"version":3,"sources":["components/Task.js","components/ToDoList.js","components/AddTask.js","components/Alert.js","components/ToolBar.js","App.js","InMemoryApp.js","index.js"],"names":["Task","props","className","type","checked","isCompleted","onChange","e","handleTaskFieldChanged","taskId","target","value","taskLabel","disabled","onClick","handleDeleteTask","ToDoList","console","log","taskList","numCompleted","length","map","task","AddTask","useState","currTask","setCurrTask","id","placeholder","onKeyPress","key","handleAddTask","Alert","children","onClose","onOK","ToolBar","showAlert","setShowAlert","toggleModal","setShowCompleted","showCompleted","handleDeleteTasks","App","filteredList","filter","setTaskList","InMemoryApp","initialData","idCounter","setIdCounter","taskID","deletedList","field","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6bb48cf2.chunk.js","sourcesContent":["import TextareaAutosize from 'react-textarea-autosize';\nimport './Task.css';\n\nfunction Task(props) {\n    return(\n        <div className=\"task-container\">\n            <input type=\"checkbox\"\n                   className=\"checkbox\"\n                   checked={props.isCompleted}\n                   onChange={(e) => {\n                        props.handleTaskFieldChanged(props.taskId, \"isCompleted\", e.target.checked)\n                   }}\n            />\n            <TextareaAutosize\n                className=\"task-label\"\n                value={props.taskLabel}\n                onChange={(e) =>\n                    props.handleTaskFieldChanged(props.taskId, \"taskLabel\", e.target.value)\n                }\n                // don't allow user to edit a task if it's been marked completed\n                disabled={props.isCompleted}\n            />\n            <div>\n                <button className=\"delete-button\"\n                        onClick={() => {\n                            props.handleDeleteTask(props.taskId);\n                        }}>\n                    X\n                </button>\n            </div>\n        </div>\n    )\n}\nexport default Task;","import React from 'react';\nimport Task from \"./Task\";\nimport './ToDoList.css';\n\nfunction ToDoList(props) {\n    console.log(\"in ToDoList \", props.taskList)\n    return (\n        <div className = \"list-container\">\n            <div className=\"my-tasks\">\n                <h2>My Tasks ({props.numCompleted}/{props.taskList.length} completed)\n                </h2>\n            </div>\n            <div className=\"checklist\">\n                {props.taskList.map(task =>\n                <Task\n                    key={task.taskId}\n                    handleDeleteTask={props.handleDeleteTask}\n                    handleTaskFieldChanged={props.handleTaskFieldChanged}\n                    {...task}\n                />)}\n            </div>\n        </div>);\n}\n\nexport default ToDoList;","import './AddTask.css';\nimport {useState} from \"react\";\n\nfunction AddTask(props){\n    const [currTask, setCurrTask] = useState(\"\");\n\n    return (\n        <div>\n            <input\n                className=\"todo-input\"\n                id=\"new-todo-text\"\n                placeholder=\"Enter task here\"\n                value={currTask}\n                onChange={e => {\n                    setCurrTask(e.target.value);\n                }}\n                onKeyPress={e => {\n                    if (currTask !== \"\") {\n                        if (e.key === \"Enter\") {\n                            props.handleAddTask(currTask);\n                            setCurrTask(\"\");\n                        }\n                    }\n                }}\n            />\n            <button className={currTask !== \"\" ? \"add-button\" : \"add-button-disabled\"}\n                    onClick={() => {\n                        if (currTask !== \"\") {\n                            props.handleAddTask(currTask);\n                            setCurrTask(\"\");\n                        }\n                    }}>\n                Add\n            </button>\n        </div>\n    );\n}\n\nexport default AddTask;","import './Alert.css';\n\nfunction Alert(props) {\n    return (\n        <div className={\"backdrop\"}>\n            <div className=\"modal\">\n                {props.children}\n                <div className=\"alert-buttons\">\n                    <button className={\"alert-button\"} id={\"alert-cancel\"} type={\"button\"}\n                            onClick={() => props.onClose()}>\n                        Cancel\n                    </button>\n                    <button className={\"alert-button\"} id={\"alert-ok\"} type={\"button\"}\n                            onClick={() => {\n                                props.onOK();\n                                props.onClose()\n                            }}>\n                        OK\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Alert;","import Alert from \"../components/Alert\"\nimport React, {useState} from \"react\";\nimport './ToolBar.css';\n\nfunction ToolBar(props) {\n    const [showAlert, setShowAlert] = useState(false);\n\n    function handleAlertOK() {\n        props.handleDeleteTasks();\n    }\n\n    function toggleModal() {\n        showAlert ? setShowAlert(false) : setShowAlert(true)\n    }\n\n    return (\n        <div>\n            <div className=\"toolbar\">\n                <button\n                    className=\"toolbar-button\"\n                    id=\"hide-button\"\n                    onClick={() => {\n                        props.setShowCompleted(!props.showCompleted)\n                    }}>\n                    {props.showCompleted ? \"Show Completed\" : \"Show All Tasks\"}\n                </button>\n                <button\n                    className=\"toolbar-button\"\n                    // only make button fully visible and support functionality if there are completed tasks\n                    id={props.numCompleted !== 0 ? null : \"delete-completed-button-hidden\"}\n                    onClick={() => {\n                        if(props.numCompleted !== 0) {\n                            toggleModal();\n                        }\n                    }}>\n                    Delete Completed</button>\n            </div>\n            {showAlert && <Alert onClose={toggleModal} onOK={handleAlertOK}>\n                <div>\n                    Are you sure you want to delete all completed tasks?\n                </div>\n            </Alert>}\n        </div>\n    );\n}\n\nexport default ToolBar;","import './App.css';\nimport './index.js';\nimport ToDoList from \"./components/ToDoList\"\nimport AddTask from \"./components/AddTask\"\nimport ToolBar from \"./components/ToolBar\"\nimport React, {useState} from \"react\";\n\nfunction App(props) {\n    const[showCompleted, setShowCompleted] = useState(true);\n    const filteredList = props.taskList.filter(task => showCompleted || !task.isCompleted);\n    const numCompleted = props.taskList.filter(task => task.isCompleted === true).length;\n\n    return (\n        <div className=\"app-container\">\n            <div className=\"heading\">\n                <h1>Task Manager</h1>\n            </div>\n            <div className=\"add-task\">\n                <AddTask\n                    taskList={filteredList}\n                    setTaskList={props.setTaskList}\n                    handleAddTask={props.handleAddTask}\n                />\n            </div>\n            <div>\n                <ToDoList\n                    taskList={filteredList}\n                    handleDeleteTask={props.handleDeleteTask}\n                    handleDeleteTasks={props.handleDeleteTasks}\n                    handleTaskFieldChanged={props.handleTaskFieldChanged}\n                    numCompleted={numCompleted}\n                />\n            </div>\n            <div>\n                <ToolBar\n                    handleDeleteTasks={props.handleDeleteTasks}\n                    showCompleted={showCompleted}\n                    setShowCompleted={setShowCompleted}\n                    numCompleted={numCompleted}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React, { useState } from \"react\";\nimport App from \"./App\"\n\nfunction InMemoryApp(props) {\n    const [taskList, setTaskList] = useState(props.initialData);\n    const [idCounter, setIdCounter] = useState(taskList.length);\n\n    // adds a task, maintaining a taskId counter\n    function handleAddTask(currTask) {\n        setTaskList([...taskList, {\n            taskId: idCounter,\n            taskLabel: currTask,\n            isCompleted: false\n        }]);\n        setIdCounter(idCounter + 1);\n    }\n\n    // handles updating any field of a task\n    function handleTaskFieldChanged(taskId, field, value) {\n        setTaskList(taskList.map(\n            task => task.taskId !== taskId\n                ? task\n                : {...task, [field]: value}))\n    }\n\n    // handles task deletion through filtering\n    function handleDeleteTask(taskID) {\n        const deletedList = taskList.filter(task => task.taskId !== taskID);\n        setTaskList(deletedList)\n    }\n    function handleDeleteTasks() {\n        setTaskList(taskList.filter(task => task.isCompleted === false))\n    }\n\n    return <div>\n        <App\n            taskList={taskList}\n            handleDeleteTask={handleDeleteTask}\n            handleDeleteTasks={handleDeleteTasks}\n            handleAddTask={handleAddTask}\n            handleTaskFieldChanged={handleTaskFieldChanged}\n        />\n    </div>\n}\n\nexport default InMemoryApp;","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport InMemoryApp from './InMemoryApp';\n\nconst initialData = [\n    {\n        taskId: 0,\n        taskLabel: \"Get lunch at dining hall\",\n        isCompleted: true\n    },\n    {\n        taskId: 1,\n        taskLabel: \"Buy textbooks\",\n        isCompleted: false\n    },\n    {\n        taskId: 2,\n        taskLabel: \"Watch videos about React\",\n        isCompleted: true\n    },\n    {\n        taskId: 3,\n        taskLabel: \"Call Mom\",\n        isCompleted: false\n    },\n    {\n        taskId: 4,\n        taskLabel: \"Meet with Prof. Rhodes\",\n        isCompleted: false\n    },\n];\n\nReactDOM.render(\n  <React.StrictMode>\n      <InMemoryApp initialData={initialData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}