{"version":3,"sources":["InMemoryApp.js","components/Alert.js","components/Task.js","components/ToDoList.js","components/AddTask.js","components/ToolBar.js","App.js","index.js"],"names":["InMemoryApp","props","useState","data","taskList","setTaskList","length","idCounter","setIdCounter","currTask","setCurrTask","lastTasks","setLastTasks","handleDeleteTask","taskID","filter","task","taskId","handleDeleteTasks","isCompleted","handleAddTask","console","log","taskLabel","handleHideTasks","handleShowTasks","handleTaskFieldChanged","field","value","map","id","Alert","className","children","type","onClick","onClose","onOK","Task","checked","onChange","ToDoList","numCompleted","isSelected","onTaskFieldChanged","AddTask","placeholder","e","target","onKeyPress","key","ToolBar","showAlert","setShowAlert","hideButton","setHideButton","toggleModal","App","class","handleCompleteTask","onAddTask","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.260acc91.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport App from \"./App\"\n\nfunction InMemoryApp(props) {\n    const [taskList, setTaskList] = useState(props.data)\n    // const [hideButton, setHideButton] = useState(false)\n    const [idCounter, setIdCounter] = useState(taskList.length);\n    const [currTask, setCurrTask] = useState(\"\");\n    const [isEditingId, setIsEditingId] = useState(null);\n    const [selectedId, setSelectedId] = useState(null);\n    const [lastTasks, setLastTasks] = useState([]);\n\n    function handleAddTask(currTask) {\n        console.log(\"adding task \", currTask)\n        console.log(\"taskList is\", taskList)\n\n        setTaskList([...taskList, {\n            taskId: idCounter,\n            taskLabel: currTask,\n            isCompleted: false\n        }]);\n        setIdCounter(idCounter + 1);\n        console.log(\"taskList \", taskList)\n    }\n\n    function handleTaskFieldChanged(taskId, field, value) {\n        function modify(task) {\n            if (task.id === taskId){\n                task[field] = value;\n                return task;\n            }\n            else {\n                return task;\n            }\n        }\n        console.log(\"changing \", taskId, \"field \", field, \"to value \", value)\n        setTaskList(taskList.map(modify));\n        console.log(\"new task List \", taskList)\n    }\n    //\n    // function handleCompleteTask(taskId) {\n    //     console.log(\"in handle complete task task ID is \", taskId)\n    //     // handleTaskFieldChanged(taskId, \"isCompleted\", true)\n    //     let todoQueue = [...taskList];\n    //     todoQueue[taskId].isCompleted = !todoQueue[taskId].isCompleted;\n    //     setTaskList(todoQueue);\n    // }\n\n    function handleDeleteTask(taskID) {\n        setTaskList(taskList.filter(task => task.taskId !==taskID))\n    }\n\n    function handleShowTasks() {\n        setTaskList(lastTasks)\n    }\n\n    function handleHideTasks() {\n        setLastTasks(taskList)\n        setTaskList(taskList.filter(task => task.isCompleted == false))\n    }\n\n    function handleDeleteTasks() {\n        setTaskList(taskList.filter(task => task.isCompleted == false))\n    }\n\n    return <div>\n        <App data={props.data}\n                taskList={taskList}\n                setTaskList={setTaskList}\n                setCurrTask={setCurrTask}\n                currTask={currTask}\n                // handleCompleteTask={handleCompleteTask}\n                handleDeleteTask={handleDeleteTask}\n                handleDeleteTasks={handleDeleteTasks}\n                handleAddTask={handleAddTask}\n                handleHideTasks = {handleHideTasks}\n                handleShowTasks = {handleShowTasks}\n                handleTaskFieldChanged={handleTaskFieldChanged}\n        />\n    </div>\n    //\n    // return (\n    //\n    //     <div>\n    //         <AddTask\n    //             onClick={createTask}\n    //         />\n    //         <button class=\"todo-input add-button\"\n    //                 onClick={() =>\n    //                 {createTask(currTask);\n    //                     setCurrTask(\"\");\n    //                 }}>\n    //             Add New Task\n    //         </button>\n    //         {/*/>*/}\n    //         {/*display*/}\n    //         {taskList.map((todo, index) => (\n    //             <div key={todo} className=\"todo\">\n    //                 <label>\n    //                     <input type=\"checkbox\" name=\"checkbox\"/>\n    //                     <span>{todo.task}</span>\n    //                 </label>\n    //                 {/*<div> {todo.task}</div>*/}\n    //             </div>\n    //         ))}\n    //         <h1>ToDoList ({selectedId === null ? 0 : 1}/{props.list.length} selected)</h1>\n    //         {props.list.map(a => <Task\n    //             onRowClick={(id) =>\n    //                 setSelectedId(id)}\n    //             onTaskFieldChanged={props.editTask}\n    //             selected={a.id === selectedId}\n    //             key={a.id}\n    //             {...a} />)}\n    //         <div class=\"tasks-remaining-message\">\n    //             {/*Show number of tasks*/}\n    //             {`${taskList.length} Remaining Tasks`}\n    //         </div>\n    //     </div>\n    // );\n}\n\nexport default InMemoryApp;","import {useState} from 'react'\nimport InMemoryApp from \"../InMemoryApp\";\n\nfunction Alert(props) {\n    return (\n        <div className={\"backdrop\"}>\n            <div className=\"modal\">\n                {props.children}\n                <div className=\"alert-buttons\">\n                    <button className={\"alert-button alert-cancel\"} type={\"button\"}\n                            onClick={() => props.onClose()}>\n                        Cancel\n                    </button>\n                    <button className={\"alert-button alert-ok\"} type={\"button\"}\n                            onClick={() => {\n                                props.onOK();\n                                props.onClose()\n                            }}>\n                        Ok\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Alert;","// import './Task.css';\nimport TaskField from './TaskField.js'\nimport InMemoryApp from \"../InMemoryApp\";\nimport {useState} from \"react\";\n\nfunction Task(props) {\n    return(\n        <div className=\"task-container\">\n            <input type=\"checkbox\" className=\"checkbox\" checked={props.isCompleted}\n                   onChange={() => {\n                       console.log(\"checked \", props.taskId, props.isCompleted, \"change to \", !props.isCompleted)\n                        props.handleTaskFieldChanged(props.taskId, \"isCompleted\", !props.isCompleted)\n            }} />\n            {/*<input type=\"checkbox\"*/}\n            {/*       checked={props.isCompleted}*/}\n            {/*       onChange={() => {*/}\n            {/*           console.log(\"checked\")*/}\n            {/*           props.handleCompleteTask(props.taskId);*/}\n            {/*           console.log(\"checked id\", props.taskId);*/}\n            {/*           props.handleTaskFieldChanged(props.taskId, \"isCompleted\", true);*/}\n            {/*           // props.setCurrTask(this);*/}\n            {/*           // console.log(this);*/}\n            {/*           // props.handleAddTask(props.currTask);*/}\n            {/*       }}*/}\n            {/*/>*/}\n            <div className=\"task-label\"> {props.taskLabel}</div>\n            <div className=\"task-buttons\">\n                <button className=\"edit-button\"\n                    onClick={() => {\n                        console.log(\"edit button clicked\")\n                        console.log(\"edit id\", props.taskId);\n                        // props.handleTaskFieldChanged(props.taskId, field, value);\n                        // props.setCurrTask(this);\n                        // console.log(this);\n                        // props.handleAddTask(props.currTask);\n                }}>\n                    Edit\n                </button>\n\n                <button className=\"delete-button\"onClick={() => {\n                    console.log(\"edit button clicked\")\n                    console.log(\"delete id\", props.taskId);\n                    props.handleDeleteTask(props.taskId);\n                    // props.handleTaskFieldChanged(props.taskId, field, value);\n                    // props.setCurrTask(this);\n                    // console.log(this);\n                    // props.handleAddTask(props.currTask);\n                }}>\n                    x\n                </button>\n            </div>\n            {/*<div*/}\n            {/*    // className={classes.join(\" \")}*/}\n            {/*            key={props.id}*/}\n            {/*            id={props.id}*/}\n            {/*            onClick={(e) => {*/}\n            {/*                props.onRowClick(e.currentTarget.id);*/}\n            {/*            }}*/}\n            {/*>*/}\n            {/*    <input type=\"checkbox\" name=\"checkbox\"/>*/}\n            {/*    <Task/>*/}\n            {/*    <TaskField field=\"task\" {...props}/>*/}\n            {/*</div>*/}\n        </div>\n    )\n    // const classes = [\"task \"];\n    // if (props.selected) {\n    //     classes.push(\"selected\");\n    // }\n    //\n    // return <div className={classes.join(\" \")}\n    //             key={props.id}\n    //             id={props.id}\n    //             onClick={(e) => {\n    //                 props.onRowClick(e.currentTarget.id);\n    //             }}\n    // >\n    //     <input type=\"checkbox\" name=\"checkbox\"/>\n    //     {/*<Task/>*/}\n    //     <TaskField field=\"task\" {...props}/>\n    // </div>\n}\nexport default Task;","import React, {useState} from 'react';\nimport Task from \"./Task\";\n\nfunction ToDoList(props) {\n    const [selectedId, setSelectedId] = useState(null);\n    let numCompleted = props.taskList.filter(task => task.isCompleted == true).length;\n\n    return (\n        <div className=\"checklist-container\">\n            <div className=\"my-tasks\">\n                {/*how to make this work?*/}\n                <h2>My Tasks ({numCompleted}/{props.taskList.length} completed)\n                </h2>\n            </div>\n            <div className=\"checklist\">\n                {props.taskList.map(task =>\n                <Task\n                    handleDeleteTask = {props.handleDeleteTask}\n                    handleHideTasks = {props.handleHideTasks}\n                    handleDeleteTasks = {props.handleDeleteTasks}\n                    handleTaskFieldChanged = {props.handleTaskFieldChanged}\n                    // handleCompleteTask={props.handleCompleteTask}\n                    taskId = {task.taskId}\n                    taskLabel = {task.taskLabel}\n                    isSelected = {task.isSelected}\n                    isCompleted = {task.isCompleted}\n                    onTaskFieldChanged={props.onTaskFieldChanged}\n                />)}\n                {/*{props.taskList.map(a => <Task*/}\n                {/*    onRowClick={(id) =>*/}\n                {/*        selectedId(id)}*/}\n                {/*    onTaskFieldChanged={props.onTaskFieldChanged}*/}\n                {/*    isSelected={a.id === selectedId}*/}\n                {/*    key={a.id}*/}\n                {/*    {...a} />)}*/}\n                {/*{selectedId && <button type=\"button\" onClick={*/}\n                {/*    () => {*/}\n                {/*        props.onTaskFieldChanged(selectedId);*/}\n                {/*    }}>*/}\n                {/*    Edit Selected*/}\n                {/*</button>}*/}\n            </div>\n        </div>);\n}\n//     const [selectedId, setSelectedId] = useState(null);\n//     return (\n//         <div>\n//             {props.taskList.map((todo, index) => (\n//                 <div key={todo} className=\"todo\">\n//                     <label>\n//                         <input type=\"checkbox\" name=\"checkbox\"/>\n//                         <span>{todo.task}</span>\n//                     </label>\n//                 </div>\n//             ))}\n//             <div className=\"tasks-remaining-message\">\n//                 {/*Show number of tasks*/}\n//                 {`${props.taskList.length} Remaining Tasks`}\n//             </div>\n//         </div>\n//     );\n// }\n        // <div>\n        //     <h1>ToDoList ({selectedId === null ? 0 : 1}/{props.list.length} selected)</h1>\n        //     {props.list.map(a => <Task\n        //         onRowClick={(id) =>\n        //             setSelectedId(id)}\n        //         onTaskFieldChanged={props.onTaskFieldChanged}\n        //         selected={a.id === selectedId}\n        //         key={a.id}\n        //         {...a} />)}\n        //     {selectedId && <button type=\"button\" onClick={\n        //         () => {\n        //             props.onDeleteTask(selectedId);\n        //             setSelectedId(null);\n        //         }}>\n        //         Delete Selected\n        //     </button>}\n        //     <button type=\"button\" onClick={props.onAddTask}>\n        //         Add\n        //     </button>\n        // </div>);\n\n\nexport default ToDoList;","function AddTask(props){\n    return (\n        <div>\n            <input\n                className=\"todo-input\"\n                id=\"add-button-text\"\n                placeholder=\"Enter task here\"\n                value={props.currTask}\n                onChange={e => {\n                    props.setCurrTask(e.target.value);\n                }}\n                onKeyPress={e => {\n                    if (e.key === \"Enter\") {\n                        props.handleAddTask(props.currTask);\n                        props.setCurrTask(\"\");\n                    }\n                }}\n            />\n            <button className=\"todo-input add-button\"\n                    onClick={() => {\n                        props.handleAddTask(props.currTask);\n                        props.setCurrTask(\"\");\n                    }}>\n                Add Task\n            </button>\n        </div>\n    );\n}\n\nexport default AddTask;","import InMemoryApp from \"../InMemoryApp\";\nimport Alert from \"../components/Alert\"\nimport React, {useState} from \"react\";\n\n\nfunction ToolBar(props) {\n    const [showAlert, setShowAlert] = useState(false);\n    let [hideButton, setHideButton] = useState(false)\n\n    function handleAlertOK() {\n        props.handleDeleteTasks();\n    }\n\n    function handleHideTasksButton() {\n        if (hideButton) {\n            props.handleShowTasks();\n        } else {\n            props.handleHideTasks();\n        }\n        hideButton ? setHideButton(false) : setHideButton(true)\n        console.log(hideButton)\n    }\n\n\n    function toggleModal() {\n        showAlert ? setShowAlert(false) : setShowAlert(true)\n    }\n\n    return (\n        <div>\n            <div className=\"toolbar\">\n                <button className=\"toolbar-button\"\n                        onClick={() => {\n                            console.log(\"hide button clicked\")\n                            handleHideTasksButton();\n                        }}\n                > Show Uncompleted\n                </button>\n                <button className=\"toolbar-button\" onClick={() => {\n                    console.log(\"delete completed button clicked\")\n                    toggleModal()\n                }}> Delete Completed</button>\n            </div>\n            {showAlert && <Alert onClose={toggleModal} onOK={handleAlertOK}>\n                <div>\n                    Are you sure you want to delete all completed tasks?\n                </div>\n            </Alert>}\n        </div>\n    );\n}\n\nexport default ToolBar;","// import logo from './logo.svg';\nimport './App.css';\nimport './index.js';\nimport Alert from \"./components/Alert\"\nimport ToDoList from \"./components/ToDoList\"\nimport AddTask from \"./components/AddTask\"\nimport ToolBar from \"./components/ToolBar\"\nimport InMemoryApp from \"./InMemoryApp\"\nimport React, {useState, useEffect} from \"react\";\n\nfunction App(props) {\n    return (\n        <div className=\"App\">\n            <div class=\"heading\">\n                <h1>- Task Manager -</h1>\n            </div>\n            <div class=\"add-task\">\n                <AddTask\n                    taskList={props.taskList}\n                    setTaskList={props.setTaskList}\n                    currTask={props.currTask}\n                    setCurrTask={props.setCurrTask}\n                    handleAddTask={props.handleAddTask}\n                />\n            </div>\n            <div>\n                <ToDoList data={props.data}\n                              taskList={props.taskList}\n                              setTaskList={props.setTaskList}\n                              handleCompleteTask={props.handleCompleteTask}\n                              handleDeleteTask={props.handleDeleteTask}\n                              handleHideTasks = {props.handleHideTasks}\n                              handleShowTasks = {props.handleShowTasks}\n                              onAddTask={props.handleAddTask}\n                              handleDeleteTasks = {props.handleDeleteTasks}\n                              handleTaskFieldChanged={props.handleTaskFieldChanged}\n                />\n            </div>\n            <div>\n                <ToolBar\n                    handleHideTasks = {props.handleHideTasks}\n                    handleShowTasks = {props.handleShowTasks}\n                    handleDeleteTasks = {props.handleDeleteTasks}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React, { useState } from \"react\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport InMemoryApp from './InMemoryApp';\n\nconst initialData = [\n    {\n        taskId: 0,\n        taskLabel: \"Get lunch at Frary\",\n        isCompleted: true\n    },\n    {\n        taskId: 1,\n        taskLabel: \"Organize finances\",\n        isCompleted: false\n    },\n    {\n        taskId: 2,\n        taskLabel: \"Play Genshin Impact\",\n        isCompleted: true\n    },\n    {\n        taskId: 3,\n        taskLabel: \"Call Mom\",\n        isCompleted: false\n    },\n    {\n        taskId: 4,\n        taskLabel: \"Meet with Prof. Rhodes\",\n        isCompleted: false\n    },\n];\n\nReactDOM.render(\n  <React.StrictMode>\n      <InMemoryApp data={initialData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// export default initialData\n"],"sourceRoot":""}